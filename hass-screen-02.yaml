substitutions:
  name: hass-screen-02
  friendly_name: Screen 02
  comment: Adafruit HUZZAH32 – Sonos Screen

packages:
  common: !include packages/common-32.yaml
  
globals:
  - id: media_artist_x
    type: int
    initial_value: '-1'
  - id: media_artist_w
    type: int
    initial_value: '-1'
  - id: media_title_x
    type: int
    initial_value: '-1'
  - id: media_title_w
    type: int
    initial_value: '-1'
  - id: media_album_x
    type: int
    initial_value: '-1'
  - id: media_album_w
    type: int
    initial_value: '-1'
  - id: media_channel_x
    type: int
    initial_value: '-1'
  - id: media_channel_w
    type: int
    initial_value: '-1'

external_components:
  - source: github://jenscski/esphome-components@main
    components: [ sh1107_base, sh1107_i2c ]

i2c:
  frequency: 800kHz
  scan: false

display:
  - platform: sh1107_i2c
    model: SH1107 64X128
    id: my_display
    rotation: 90
    contrast: 1%
    update_interval: 75ms
    pages:
      - id: p_idle
        lambda: |-
          const int padding = 1500 / id(my_display).get_update_interval();
          const char* tag = "${name}";

          if(!id(system_status).state)
          {
            it.print(128/2, 64/2, id(f_mdi_64), TextAlign::CENTER, "\U000F0C5F");
          }
          else
          {
            if(!id(media_playing).state)
            {
              it.strftime(128/2, (64 - 14)/2, id(f_clock), COLOR_ON, TextAlign::CENTER, "%H:%M", id(hass_time).now());
              if(!id(media_channel).state.empty())
                it.print(0, 64, id(f_inter_l_12), TextAlign::BOTTOM_LEFT, id(media_channel).state.c_str());
              else if(!id(media_artist).state.empty())
                it.print(0, 64, id(f_inter_l_12), TextAlign::BOTTOM_LEFT, id(media_artist).state.c_str());
            }
            else
            {
              if(id(media_channel_w) < 0)
              {
                int x1, y1, width, height;
                it.get_text_bounds(0, 0, id(media_channel).state.c_str(), id(f_inter_l_12), TextAlign::CENTER, &x1, &y1, &width, &height);

                id(media_channel_x) = padding;
                id(media_channel_w) = width;
              }
              else if(id(media_channel_w) > 128 && (id(media_channel_w) - 128) + id(media_channel_x) < -padding)
              {
                id(media_channel_x) = padding;
              }
              else if(id(media_channel_w) > 128)
              {
                id(media_channel_x) --;
              }

              if(id(media_artist_w) < 0)
              {
                int x1, y1, width, height;
                it.get_text_bounds(0, 0, id(media_artist).state.c_str(), id(f_inter_l_12), TextAlign::CENTER, &x1, &y1, &width, &height);

                id(media_artist_x) = padding;
                id(media_artist_w) = width;
              }
              else if(id(media_artist_w) > 128 && (id(media_artist_w) - 128) + id(media_artist_x) < -padding)
              {
                id(media_artist_x) = padding;
              }
              else if(id(media_artist_w) > 128)
              {
                id(media_artist_x) --;
              }

              if(id(media_title_w) < 0)
              {
                int x1, y1, width, height;
                it.get_text_bounds(0, 0, id(media_title).state.c_str(), id(f_inter_l_12), TextAlign::CENTER, &x1, &y1, &width, &height);

                id(media_title_x) = padding;
                id(media_title_w) = width;
              }
              else if(id(media_title_w) > 128 && (id(media_title_w) - 128) + id(media_title_x) < -padding)
              {
                id(media_title_x) = padding;
              }
              else if(id(media_title_w) > 128)
              {
                id(media_title_x) --;
              }

              if(id(media_album_w) < 0)
              {
                int x1, y1, width, height;
                it.get_text_bounds(0, 0, id(media_album).state.c_str(), id(f_inter_l_12), TextAlign::CENTER, &x1, &y1, &width, &height);

                id(media_album_x) = padding;
                id(media_album_w) = width;
              }
              else if(id(media_album_w) > 128 && (id(media_album_w) - 128) + id(media_album_x) < -padding)
              {
                id(media_album_x) = padding;
              }
              else if(id(media_album_w) > 128)
              {
                id(media_album_x) --;
              }

              if(id(media_album_w) < 0)
              {
                int x1, y1, width, height;
                it.get_text_bounds(0, 0, id(media_album).state.c_str(), id(f_inter_l_12), TextAlign::CENTER, &x1, &y1, &width, &height);

                id(media_album_x) = 0;
                id(media_album_w) = width;
              }

              auto xpos = [](int x, int w)
              {
                if(w <= 128)
                  return 0;

                int ret = x;
                ret = min(ret, 0);
                ret = max(ret, 128 - w);

                return ret;
              };

              int pos = 0;

              if(!id(media_channel).state.empty())
                it.print(xpos(id(media_channel_x), id(media_channel_w)), 16 * pos++, id(f_inter_l_12), id(media_channel).state.c_str());
              
              if(!id(media_artist).state.empty())
                it.print(xpos(id(media_artist_x), id(media_artist_w)), 16 * pos++, id(f_inter_l_12), id(media_artist).state.c_str());
              
              if(!id(media_title).state.empty())
                it.print(xpos(id(media_title_x), id(media_title_w)), 16 * pos++, id(f_inter_l_12), id(media_title).state.c_str());
              
              if(!id(media_album).state.empty())
                it.print(xpos(id(media_album_x), id(media_album_w)), 16 * pos++, id(f_inter_l_12), id(media_album).state.c_str());

              it.strftime(0, 64, id(f_clock_small), COLOR_ON, TextAlign::BOTTOM_LEFT, "%H:%M", id(hass_time).now());
            }

            // volume footer
            int w = 35;
            int h = 14;
            it.filled_rectangle(128 - w, 64 - h, w, h, COLOR_OFF);
            it.printf(128 - 13, 64, id(f_clock_small), TextAlign::BOTTOM_RIGHT, "%d", (int)id(media_volume).state);
            it.print(128,       64, id(f_mdi_12),     TextAlign::BOTTOM_RIGHT, id(media_muted).state ? "\U000F0581" : "\U000F057E");
            //it.line(0, 64 - 15, 128, 64 - 15);
          }

# https://maximilian.schalch.de/2018/05/complete-list-of-european-special-characters/
font:
  - file: fonts/WorkSans-Regular.ttf
    size: 14
    id: f_inter_l_12
    glyphs: '!''&«»#"%’^´()+=,-_.:/°0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ abcdefghijklmnopqrstuvwxyz¡¿·ÄäÀàÁáÂâÃãÅåǍǎĄąĂăÆæĀāÇçĆćĈĉČčĎđĐďðÈèÉéÊêËëĚěĘęĖėĒēĜĝĢģĞğĤĥÌìÍíÎîÏïıĪīĮįĴĵĶķĹĺĻļŁłĽľĿŀÑñŃńŇňŅņÖöÒòÓóÔôÕõŐőØøŒœŔŕŘřẞßŚśŜŝŞşŠšȘșŤťŢţÞþȚțÜüÙùÚúÛûŰűŨũŲųŮůŪūŴŵÝýŸÿŶŷŹźŽžŻż'
  - file: fonts/AzeretMono-Medium.ttf
    id: f_clock
    size: 32
    glyphs: '0123456789:'
  - file: fonts/AzeretMono-Light.ttf
    id: f_clock_small
    size: 12
    glyphs: '0123456789:'
  - file: fonts/materialdesignicons-webfont.ttf
    size: 12
    id: f_mdi_12
    glyphs:
      - "\U000F057E" # mdi-volume-high
      - "\U000F0581" # mdi-volume-off
  - file: fonts/materialdesignicons-webfont.ttf
    size: 64
    id: f_mdi_64
    glyphs:
      - "\U000F0C5F" # mdi-close-network-outline

text_sensor:
  - platform: homeassistant
    id: media_artist
    entity_id: sensor.media_artist
    internal: true
    on_value:
      then:
        - globals.set:
            id: media_artist_x
            value: '-1'
        - globals.set:
            id: media_artist_w
            value: '-1'
        - component.update: my_display
  - platform: homeassistant
    id: media_channel
    entity_id: sensor.media_channel
    internal: true
    on_value:
      then:
        - globals.set:
            id: media_channel_x
            value: '-1'
        - globals.set:
            id: media_channel_w
            value: '-1'
        - component.update: my_display
  - platform: homeassistant
    id: media_title
    entity_id: sensor.media_title
    internal: true
    on_value:
      then:
        - globals.set:
            id: media_title_x
            value: '-1'
        - globals.set:
            id: media_title_w
            value: '-1'
        - component.update: my_display
  - platform: homeassistant
    id: media_album
    entity_id: sensor.media_album
    internal: true
    on_value:
      then:
        - globals.set:
            id: media_album_x
            value: '-1'
        - globals.set:
            id: media_album_w
            value: '-1'
        - component.update: my_display
sensor:
  - platform: homeassistant
    id: media_volume
    entity_id: sensor.media_volume
    internal: true
    on_value:
      then:
        - component.update: my_display

binary_sensor:
  - platform: homeassistant
    id: media_playing
    entity_id: sensor.media_playing
    internal: true
    on_state:
      then:
        - component.update: my_display
  - platform: homeassistant
    id: media_muted
    entity_id: sensor.media_muted
    internal: true
    on_state:
      then:
        - component.update: my_display